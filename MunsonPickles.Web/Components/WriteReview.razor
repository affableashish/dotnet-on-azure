@using MunsonPickles.Shared.Entities

@attribute [RenderModeServer]

@inject IJSRuntime Js
@inject ReviewService ReviewService

<div class="modal fade" id="reviewModal" tabindex="-1" role="dialog" aria-hidden="true" aria-modal="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modalTitleLabel">What did you think about @Product?.Name</h4>   
                <button type="button" class="close" data-dismiss="modal" aria-lable="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">                                
                <textarea class="form-control" rows="10" 
                placeholder="Leave us a review, we'll ❤️ it and we'll ❤️ you!"
                @bind="_reviewText" />
                
                <ImageUpload @key="@(_inputFileId)" OnUploadCompleted="UpdateUploadResults" />
                
                @if (_uploadResults.Any() && _uploadResults.All(u => u.Uploaded))
                {
                    <p class="bg-success">All file(s) uploaded!</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-dismiss="modal" @onclick="@Cancel">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="@SaveReview">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Product? Product { get; set; }
    
    string _reviewText = string.Empty;
    string _loggedInUser = "ashish";
    string _inputFileId = Guid.NewGuid().ToString();
    private List<ImageUploadResult> _uploadResults = new();

    void Cancel()
    {
        _uploadResults.Clear();
        ClearImageUpload();
    }
    
    async Task SaveReview()
    {
        var photoUrls = _uploadResults.Where(r => r.Uploaded)
            .Select(r => r.StoredFileUrl!)
            .ToList();
        await ReviewService.AddReview(_reviewText, photoUrls, Product!.Id);

        // we'll just assume everything worked out great and close the modal
        _reviewText = string.Empty;
        _uploadResults.Clear();

        ClearImageUpload();

        await Js.InvokeVoidAsync("hideModal", "reviewModal");
    }
    
    // Reference: https://stackoverflow.com/a/70877124/8644294
    private void ClearImageUpload()
    {
        _inputFileId = Guid.NewGuid().ToString();
    }
    
    void UpdateUploadResults(List<ImageUploadResult> uploadResults)
    {
        _uploadResults = uploadResults;
    }
}